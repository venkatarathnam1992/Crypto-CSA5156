#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Function to print a block of bytes
void print_block(uint8_t *block, int block_size) {
    for (int i = 0; i < block_size; i++) {
        printf("%02X ", block[i]);
    }
    printf("\n");
}

// Left shift a block of bytes
void left_shift(uint8_t *block, uint8_t *result, int block_size) {
    int overflow = 0;
    for (int i = block_size - 1; i >= 0; i--) {
        result[i] = (block[i] << 1) | overflow;
        overflow = (block[i] & 0x80) ? 1 : 0;
    }
}

// XOR with Rb if necessary
void xor_with_rb(uint8_t *block, int block_size, uint8_t Rb) {
    if (block[0] & 0x80) {
        block[block_size - 1] ^= Rb;
    }
}

// Generate subkeys K1 and K2
void generate_subkeys(uint8_t *L, int block_size, uint8_t Rb, uint8_t *K1, uint8_t *K2) {
    left_shift(L, K1, block_size);
    xor_with_rb(K1, block_size, Rb);
    
    left_shift(K1, K2, block_size);
    xor_with_rb(K2, block_size, Rb);
}

int main() {
    // Example block sizes
    const int BLOCK_SIZE_64 = 8;
    const int BLOCK_SIZE_128 = 16;
    
    // Example L values (result of E_K(0...0))
    uint8_t L_64[BLOCK_SIZE_64] = {0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87};  // Example value
    uint8_t L_128[BLOCK_SIZE_128] = {0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87};  // Example value
    
    // Rb values for 64-bit and 128-bit block sizes
    uint8_t Rb_64 = 0x1B;
    uint8_t Rb_128 = 0x87;
    
    // Buffers for subkeys
    uint8_t K1_64[BLOCK_SIZE_64], K2_64[BLOCK_SIZE_64];
    uint8_t K1_128[BLOCK_SIZE_128], K2_128[BLOCK_SIZE_128];
    
    // Generate subkeys for 64-bit block size
    generate_subkeys(L_64, BLOCK_SIZE_64, Rb_64, K1_64, K2_64);
    
    // Generate subkeys for 128-bit block size
    generate_subkeys(L_128, BLOCK_SIZE_128, Rb_128, K1_128, K2_128);
    
    // Print results
    printf("64-bit block size:\n");
    printf("K1: ");
    print_block(K1_64, BLOCK_SIZE_64);
    printf("K2: ");
    print_block(K2_64, BLOCK_SIZE_64);
    
    printf("128-bit block size:\n");
    printf("K1: ");
    print_block(K1_128, BLOCK_SIZE_128);
    printf("K2: ");
    print_block(K2_128, BLOCK_SIZ64-bit block size:
    
    return 0;
}
output:
K1: 3C 5A 78 96 B4 D2 F1 0E
K2: 78 B4 F1 2D 69 A5 E2 1C
128-bit block size:
K1: 3C 5A 78 96 B4 D2 F1 0E 3C 5A 78 96 B4 D2 F1 0E
K2: 78 B4 F1 2D 69 A5 E2 1C 78 B4 F1 2D 69 A5 E2 1CE_128);
    
